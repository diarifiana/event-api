generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma" - this is deleted
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean
  events    Event[]

  @@map("categories")
}

model Organizer {
  id           Int           @id @default(autoincrement())
  name         String
  aboutUs      String
  profilePic   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDeleted    Boolean
  events       Event[]
  transactions Transaction[]

  @@map("organizers")
}

model Event {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  organizerId Int
  organizer   Organizer @relation(fields: [organizerId], references: [id])
  slug        String
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  thumbnail   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean
  tickets     Ticket[]
  vouchers    Voucher[]

  @@map("events")
}

model User {
  id             Int           @id @default(autoincrement())
  referralNumber Int
  name           String
  email          String
  password       String
  point          String
  role           String
  profilePic     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isDeleted      Boolean
  transactions   Transaction[]

  @@map("users")
}

model Ticket {
  id            Int           @id @default(autoincrement())
  eventId       Int
  event         Event         @relation(fields: [eventId], references: [id])
  ticketType    String
  price         Int
  totalSeat     Int
  availableSeat Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean
  transactions  Transaction[]

  @@map("tickets")
}

model Coupon {
  id            Int           @id @default(autoincrement())
  code          String
  discountPrice Int
  isUsed        Boolean
  validFrom     DateTime
  validUntil    DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean
  transactions  Transaction[]

  @@map("coupons")
}

model Voucher {
  id             Int           @id @default(autoincrement())
  eventId        Int
  event          Event         @relation(fields: [eventId], references: [id])
  code           String
  discountAmount Int
  startDate      DateTime
  endDate        DateTime
  quantity       Int
  claimed        Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isDeleted      Boolean
  transactions   Transaction[]

  @@map("vouchers")
}

model Transaction {
  id                    Int        @id @default(autoincrement())
  userId                Int
  user                  User       @relation(fields: [userId], references: [id])
  ticketId              Int
  ticket                Ticket     @relation(fields: [ticketId], references: [id]) // opt + shift + f
  couponId              Int
  coupon                Coupon     @relation(fields: [couponId], references: [id])
  voucherId             Int
  voucher               Voucher    @relation(fields: [voucherId], references: [id])
  quantity              Int
  totalAmount           Int
  status                String
  usePoints             Boolean
  paymentProof          String
  paymentExpiredAt      DateTime?
  confirmationExpiredAt DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  isDeleted             Boolean
  organizerId           Int?
  organizer             Organizer? @relation(fields: [organizerId], references: [id])

  @@map("transactions")
}
